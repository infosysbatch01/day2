Data types in Java are classified into two types:

Primitive—which include char,byte,short,int,long
Non-primitive—which include Classes, Interfaces, and Arrays.


---------------------------------------------------------------------------------------------------
Type	Size	Range of values that can be stored
byte	1 byte	−128 to 127
short	2 bytes	−32768 to 32767
int	4 bytes	−2,147,483,648 to 2,147,483,647
long	8 bytes	9,223,372,036,854,775,808 to 9,223,372,036,854,755,807
float	4 bytes	3.4e−038 to 3.4e+038
double	8 bytes	1.7e−308 to 1.7e+038
char    2 bytes  It has a minimum value of 
                 ‘u0000’ (or 0) and a maximum value of ‘uffff’ (or 65,535, inclusive)
boolean 1 bit    true or false

---------------------------------------------------------------------------------------------------



Java Tokens
A token is the smallest element in a program that is meaningful to the compiler. 
These tokens define the structure of the language. The Java token set can be divided 
into five categories: Identifiers, Keywords, Literals, Operators, and Separators.

1. Identifiers
Identifiers are names provided by you. These can be assigned to variables, methods, functions, classes etc. to uniquely identify them to the compiler.

2. Keywords
Keywords are reserved words that have a specific meaning for the compiler. They cannot be used as identifiers. Java has a rich set of keywords. Some examples are: boolean, char, if, protected, new, this, try, catch, null, threadsafe etc.
keywords

S.No	Keyword	Usage
1.	abstract	Specifies that a class or method will be implemented later, in a subclass 
2.	assert	        Assert describes a predicate placed in a java program to indicate that the developer thinks that the predicate is always true at that place.
3. 	boolean  	A data type that can hold True and False values only 
4.	break	        A control statement for breaking out of loops.
5.	byte	        A data type that can hold 8-bit data values 
6.	case	        Used in switch statements to mark blocks of text
7.	catch	        Catches exceptions generated by try statements
8.	char 	        A data type that can hold unsigned 16-bit Unicode characters
9.	class	        Declares a new class
10.	continue	Sends control back outside a loop 
11.	default	        Specifies the default block of code in a switch statement
12.	do	        Starts a do-while loop
13.	double	        A data type that can hold 64-bit floating-point numbers
14.	else	        Indicates alternative branches in an if statement 
15.	enum	        A Java keyword is used to declare an enumerated type. Enumerations extend the base class.
16.	extends	        Indicates that a class is derived from another class or interface 
17.	final   	Indicates that a variable holds a constant value or that a method will not be overridden
18.	finally	        Indicates a block of code in a try-catch structure that will always be executed
19.	float	        A data type that holds a 32-bit floating-point number 
20.	for	        Used to start a for loop
21.	if	        Tests a true/false expression and branches accordingly
22.	implements	Specifies that a class implements an interface 
23.	import   	References other classes
24.	instanceof	Indicates whether an object is an instance of a specific class or implements an interface 
25.	int	        A data type that can hold a 32-bit signed integer 
26.	interface	Declares an interface
27.	long	        A data type that holds a 64-bit integer
28.	native	        Specifies that a method is implemented with native (platform-specific) code 
29.	new	        Creates new objects 
30.	null	        Indicates that a reference does not refer to anything 
31.	package	        Declares a Java package
32.	private  	An access specifier indicating that a method or variable may be accessed only in the class it’s declared in
33.	protected	An access specifier indicating that a method or variable may only be accessed in the class it’s declared in (or a subclass of the class it’s declared in or other classes in the same package)
34.	public	        An access specifier used for classes, interfaces, methods, and variables indicating that an item is accessible throughout the application (or where the class that defines it is accessible)
35.	return	        Sends control and possibly a return value back from a called method 
36.	short	        A data type that can hold a 16-bit integer 
37	static	        Indicates that a variable or method is a class method (rather than being limited to one particular object)
38.	strictfp	A Java keyword is used to restrict the precision and rounding of floating-point calculations to ensure portability.
39.	super	        Refers to a class’s base class (used in a method or class constructor) 
40.	switch	        A statement that executes code based on a test value 
41.	synchronized	Specifies critical sections or methods in multithreaded code
42.	this	        Refers to the current object in a method or constructor 
43.	throw 	        Creates an exception 
44.	throws	        Indicates what exceptions may be thrown by a method 
45.	transient	Specifies that a variable is not part of an object’s persistent state
46.	try	        Starts a block of code that will be tested for exceptions 
47.	void	        Specifies that a method does not have a return value
48.	volatile	This indicates that a variable may change asynchronously
49.	while	        Starts a while loop





3. Literals
Literals are variables whose values remain constant throughout the program. 
They are also called Constants. 

4. Operators
An operator is a symbol that operates on one or more operands to produce a result.

They will be discussed in greater detail in the next article.

5. Separators
Separators are symbols that indicate the division and arrangement of groups of code. The structure and function of code is generally defined by the separators. The separators used in Java are as follows:

parentheses ( )
Used to define precedence in expressions, to enclose parameters in method definitions, and enclosing cast types.
braces { }
Used to define a block of code and to hold the values of arrays.
brackets [ ]
Used to declare array types.
semicolon ;
Used to separate statements.
comma ,
Used to separate identifiers in a variable declaration and in the for statement.
period .
Used to separate package names from classes and subclasses and to separate a variable or
 a method from a reference variable.
--------------------------------------------------------------------------------------------------
int a,b;
String str1,str2;


  int a;
  int b;
--------------------------------------------------------------------------------------
  float f=12.34;

// The above line will show compilation error. According to you 12.34 seems as a float value but
it is not. 12.34 is a double value.So the challenge is with data conversion. We are trying to
accomodate a data type which is higher in byte size to a datatype which smaller in byte size.
Double is having a size of 8 bytes and float is having a size of 4 bytes. So 8 bytes cannot be
accomodatesd in 4 bytes.

Q So do we have a solution on the same?
A Yes. We can put a suffix as f or F after the value.
   float avg=12.34f / float avg=12.34F
--------------------------------------------------------------------------------------------------
 float avg=10; // In this case we need not put a suffix of f or F because 10 is of type int.
So int can be stored in float without any conversion.
-------------------------------------------------------------------------------------------------
So the above expression is an example of type conversion as we are converting from int to float type.

double d=100;
So the above expression is also fine as we are converting int to double. Double is having a 
size of 8 bytes and int is having a size of 4. 
---------------------------------------------------------------------------------------------------
double d=12.34;
[So the above expression is for storing the double value 12.34 in double variable d]

double d=12.34f;
[ So the above expression is for storing the float value in doublte variable d]

float d=12.34;
[ The above expression is incorrect as we are storing the double value 12.34 in the float variable d]

float d=(float)12.34;
[ The above expression is correct as we are type casting the double type as float ]

float d=12.34f;
[ the above expression is fine as we are storing a float value in a float variable d]


float d=10;
[ The above expression is fine as we are storing a int value in a float variable d]

double d=10;
[ The above expression is fine as we are storing a int value in a double variable d]

---------------------------------------------------------------------------------------------------

 class DataConversionDemo1 {
 public static void main(String[] args){
    int num=5;
    int res1=num/2;// int=int/int
    System.out.println(res1); // 2
    float res2=num/2;  // float=int/int  
    System.out.println(res2); // 2.0
    double res3=num/2.0;    // double=int/double(So the output of the entire expression is treated as double==> double
    System.out.println(res3);   //2.5 // double value   
   // int res4=num/2.0;   int/double ===> double is assigned to int
  // The above line will give compilation error
     int res4=num/2;
     System.out.println(res4);
     int res5=(int)(num/2.0);        int =(int)((num/2.0)double)
     System.out.println(res5);      //2  
 }

 }
--------------------------------------------------------
Conversion Example

CASE 1:-
   double d;
   int num=10;
   d=num; // Conversion as the smaller datatype value can be assigned to bigger datatype variable

CASE 2:-

    int num=5;
    double d=num/2.0;   double=(num)int===>double/double;    

  int num=5;
  double d=num/2.0f;
--------------------------------------------------------------------------------------------
class DataConversionDemo2{

  
  public static void main(String[] args) {
	int discountPercentage = 10;
	double totalPrice = 200;
	double priceAfterDiscount = totalPrice * (1 - (discountPercentage / 100));
	System.out.println("Customer has paid a bill of amount: "+ priceAfterDiscount);
}


}
class Tester {
   public static void main(String args[]) {
   double pie=3.14;
   int radius1=10;
   int radius2=20;
    int area1;
    int area2;
   area1=pie*radius1*radius1;
   area2=pie*radius2*radius2;
   System.out.println(area1);     // area1 
   System.out.println(area2);
  }
}
------------------------------------------------------------------------------------------------
class Tester {
   public static void main(String args[]) {
   double pie=3.14;
   int radius1=10;
   int radius2=20;
   int area1=pie*radius1*radius1;
   int area2=pie*radius2*radius2;
   System.out.println(area1);      
   System.out.println(area2);
  }
}
    

   }
 }
-------------------------------------------------------------------------------
  if(logical_expression) {}
  int num1=10;
  int num2=20;
  if(num1==num2) {}
  if(num1>num2)  {}
  String customerType="Regular";
  if(customerType=="Regular") {}

 if(num1=num2) {}
// Here in the above statement we are assigning num1 with the value num2. Which means num1 gets a value
  as 20.

 if(20){}  ===> work in C as in C non zero value is considered as something true.

class IfDemo1 {
  public static void main(String args[]) {
      int num1=10;
      int num2=20;
      // if(num1==num2) {}
     if(num1=num2) //Type mismatch: cannot convert from int to boolean
     { 
     System.out.println("Both are equal");
     } // end of if
   } // end of main
 }  // end of class
----------------------------------------------------------------------------------------------------
public class Customer1 {
	public static void main(String[] args) {
		String customerType = "Regular";
		int quantity = 2;
		int unitPrice = 10;
		int totalCost = 0;
		int discount = 5;
		int deliveryCharge = 5;
		totalCost = unitPrice * quantity;
		if (customerType == "Regular") {
			totalCost = totalCost - (totalCost * discount / 100);
			System.out.println("You are a regular customer and eligible for 5% discount");
		} else {
			totalCost = totalCost + deliveryCharge;
			System.out.println("You need to pay an additional delivery charge of $5");
		}
		System.out.println("Total cost: " + totalCost);
	}
}
-----------------------------------------------------------------------------------------------

public class Customer2 {
	public static void main(String[] args) {
		String customerType = "Regular";
		int quantity = 3;
		int unitPrice = 10;
		int discount = 5;
		int deliveryCharge = 5;
		int totalCost = unitPrice * quantity;
		if (customerType == "Regular") {
			totalCost = totalCost - (totalCost * discount / 100);
			System.out.println("You are a regular customer and eligible for 5% discount");
			System.out.println("The total cost to be paid is " + totalCost);
		} else if (customerType == "Guest") {
			totalCost = totalCost + deliveryCharge;
			System.out.println("You need to pay an additional delivery charge of $5");
			System.out.println("The total cost to be paid is" + totalCost);
		} else // If there is only one statement inside a block, {} is optional
			System.out.println("Invalid customer type");
	}
}
-----------------------------------
Depending on the requirement we can have:

*   if(condition) {}
*   if(condition) {} else {}
*   if(condition) {} else if(condition) {}
*   if(condition) {} else if(condition) {} else {}
*   if(condition) {} else if(condition) else if(condition) {} else {}
*   if(condition) {} else if(condition) else if(condition) {}
---------------------------------------------------------------------------------------------------

class Tester {
	public static void main(String[] args) {
		int marks = 90;

		if (marks < 50) {
			System.out.println("Fail");
		} else if (marks >= 50 && marks < 60) {
			System.out.println("D grade");
		} else if (marks >= 60 && marks < 70) {
			System.out.println("C grade");
		} else if (marks >= 70 && marks < 80) {
			System.out.println("B grade");
		} else if (marks >= 80 && marks < 90) {
			System.out.println("A grade");
		} else if (marks >= 90 && marks <= 100) {
			System.out.println("A+ grade");
		} else {
			System.out.println("Invalid!");
		}
	}
}
--------------------------------------------------------------------------------------------------------------

public class Customer3 {
	public static void main(String[] args) {
		String customerType = "Guest";
		int quantity = 2;
		int unitPrice = 10;
		int totalCost = 0;
		int discount = 5;
		int deliveryCharge = 5;
		totalCost = (unitPrice * quantity);
		if (customerType == "Regular") {
			totalCost = totalCost - (totalCost * discount / 100);
			System.out.println("You are a regular customer and have got 5% discount");
			System.out.println("The total cost to be paid is " + totalCost);
			if (totalCost >= 20) {
				System.out.println("You have got a gift voucher!!!!");
			}
		} else if (customerType == "Guest") {
			totalCost = totalCost + deliveryCharge;
			System.out.println("You need to pay an additional delivery charge of $5");
			System.out.println("The total cost to be paid is " + totalCost);
		} else {
			System.out.println("Invalid selection");
		}
	}
}
-----------------------------------

public class Customer4 {
	public static void main(String[] args) {
		String orderedFood = "Pizza";
		switch (orderedFood) {
		case "Burger":
			System.out.println("You have ordered Burger. Unit price: $10");
			break;
		case "Pizza":
			System.out.println("You have ordered Pizza. Unit price: $15");
			break;
		case "Sandwich":
			System.out.println("You have ordered Sandwich. Unit price: $8");
			break;
		default:
			System.out.println("Invalid selection");
		}
	}
}
-------------------------------
public class Customer5 {
	public static void main(String[] args) {
		String orderedFood = "Pizza";
		switch (orderedFood) {
		case "Burger":
			System.out.println("You have ordered Burger. Unit price: $10");
			break;
		case "Pizza":
			System.out.println("You have ordered Pizza. Unit price: $15");
			
		case "Sandwich":
			System.out.println("You have ordered Sandwich. Unit price: $8");
			
		default:
			System.out.println("Invalid selection");
		}
	}
}
[In the above code after showing the You have ordered Pizza. Unit price: $15, it will display
You have ordered Sandwich. Unit price: $8
Invalid selection
As we missed writing break in the case for Pizza and Sandwich. break takes the control out of the 
switch construct. ]
------------------------------------------------------------------------------------------
Q In switch case expression what are the datatypes allowed?
A) char,byte,short,int,String,enum.

    class SwitchDemo1 {
     public static void main(String args[]) {
      long ch=1;
      switch(ch){
      case 1 : System.out.println("1");
               break;
      case 2 : System.out.println("2");
               break;
      default : System.out.println("The option is incorrect!!!");
               
      }
   }
 }
[Note: Above code will show compilation error as the switch case expression is having a datatype  
 as long. But long datatype is not allowed.]
-----------------------------------------------------------------------------------------------------
Q Is it necessary to write default at the end of switch block?
A No. We can write default at the begining or in between the cases.

 class SwitchDemo2 {
     public static void main(String args[]) {
      int ch=1;
      switch(ch){
       default : System.out.println("The option is incorrect!!!");
               break;
      case 1 : System.out.println("1");
               break;
      case 2 : System.out.println("2");
            
     
               
      }
   }
 }
[With the last condition [ default or case we don't require any break . As in the above
example with case 2 we dont have any break statement.]
--------------------------------------------------------------------------------------------------------